<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kenwood Chan</title>
    <link>https://kenwoodjw.github.io/</link>
    <description>Recent content on Kenwood Chan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 25 Jul 2020 16:20:35 +0800</lastBuildDate><atom:link href="https://kenwoodjw.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Loki</title>
      <link>https://kenwoodjw.github.io/post/loki/</link>
      <pubDate>Sat, 25 Jul 2020 16:20:35 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/loki/</guid>
      <description>loki 日志采集安装 下载loki和promtail wget https://github.com/grafana/loki/releases/download/v1.5.0/loki-linux-amd64.zip uznip loki-linux-amd64.zip mv loki-linux-amd64 /usr/local/bin/loki wget https://github.com/grafana/loki/releases/download/v1.5.0/promtail-linux-amd64.zip unzip promtail-linux-amd64.zip unzip promtail-linux-amd64 /usr/local/bin/promtail 配置文件 https://github.com/grafana/loki/blob/v1.5.0/cmd/loki/loki-local-config.yaml https://github.com/grafana/loki/blob/v1.5.0/cmd/promtail/promtail-local-config.yaml mv loki-local-config.yaml /usr/local/bin/config-loki.yml mv promtail-local-config.yaml /usr/local/bin/config-promtail.yml 配置systemd vi /etc/systemd/system/loki.service [Unit] Description=Loki service After=network.target [Service] Type=simple ExecStart=/usr/local/bin/loki -config.file /usr/local/bin/config-loki.yml [Install] WantedBy=multi-user.target</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://kenwoodjw.github.io/post/docker/</link>
      <pubDate>Sun, 01 Mar 2020 16:40:23 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/docker/</guid>
      <description>docker namespace 概念 首先让我们看看docker 官方文档的解释 当你启动一个container，docker会为container创建 一系列的namespa</description>
    </item>
    
    <item>
      <title>prometheus 使用blackbox-exporter</title>
      <link>https://kenwoodjw.github.io/post/k8s_05/</link>
      <pubDate>Fri, 03 Jan 2020 11:33:46 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/k8s_05/</guid>
      <description>Blackbox-exporter介绍 Blackbox Exporter 是 Prometheus 社区提供的官方黑盒监控解决方案，其允许用户通过：HTTP、HTTPS、DNS、TCP 以及 ICMP 的方</description>
    </item>
    
    <item>
      <title>K8s_04</title>
      <link>https://kenwoodjw.github.io/post/k8s_04/</link>
      <pubDate>Mon, 05 Aug 2019 22:48:13 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/k8s_04/</guid>
      <description>为什么需要ingress？ Ingress 只需要一个公网ip就能为许多服务提供访问，当客户端向ingress发送HTTP请求时，Ingress 会根据请求的</description>
    </item>
    
    <item>
      <title>K8s_03</title>
      <link>https://kenwoodjw.github.io/post/k8s_03/</link>
      <pubDate>Thu, 25 Jul 2019 23:37:29 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/k8s_03/</guid>
      <description>configmap 热更新 更新应用配置且不重启应用程序 使用环境变量或者命令行参数作为配置源的弊端在于无法在进程运行时更新配置。将configmap 暴露为卷可以</description>
    </item>
    
    <item>
      <title>K8s_02</title>
      <link>https://kenwoodjw.github.io/post/k8s_02/</link>
      <pubDate>Mon, 22 Jul 2019 00:07:37 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/k8s_02/</guid>
      <description>K8s 服务的创建 为什么需要服务？ 1.pod是短暂的，随时会启动或关闭 2.pod在启动时才分配地址，因此客户端不能提前知道服务的pod的ip地址 3</description>
    </item>
    
    <item>
      <title>Python装饰器</title>
      <link>https://kenwoodjw.github.io/post/python_03/</link>
      <pubDate>Sat, 11 May 2019 22:15:01 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/python_03/</guid>
      <description>python装饰器 python装饰传入一个函数，添加一些功能，然后返回它 闭包 先了解闭包的功能，对理解装饰器有很大的帮助 什么是闭包(closu</description>
    </item>
    
    <item>
      <title>如何讲明白技术</title>
      <link>https://kenwoodjw.github.io/post/blog01/</link>
      <pubDate>Wed, 08 May 2019 22:22:54 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/blog01/</guid>
      <description>在面试的时候，技术问题所占的比重非常大，如何讲明白技术，决定了面试的成败。从某种程度，也体现你对技术的了解程度，所以如何讲明白技术。如何在学</description>
    </item>
    
    <item>
      <title>Arch_linux deepin 桌面蓝牙连接故障解决</title>
      <link>https://kenwoodjw.github.io/post/arch_linux_01/</link>
      <pubDate>Sat, 04 May 2019 22:47:12 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/arch_linux_01/</guid>
      <description>arch linux deepin桌面蓝牙无法连接 重装桌面deepin，发现没有蓝牙功能，按照wikihttps://wiki.archlinux.org/i</description>
    </item>
    
    <item>
      <title>Python后端架构演进</title>
      <link>https://kenwoodjw.github.io/post/python_02/</link>
      <pubDate>Mon, 22 Apr 2019 23:25:20 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/python_02/</guid>
      <description>转载自https://zhu327.github.io/2018/07/19/python%E5%90%8E%E7%AB%AF%E6%9E%</description>
    </item>
    
    <item>
      <title>为什么需要pod</title>
      <link>https://kenwoodjw.github.io/post/k8s01/</link>
      <pubDate>Wed, 10 Apr 2019 22:35:58 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/k8s01/</guid>
      <description>Pod的实现原理： 首先，关于Pod最重要的一个事实是：它只是一个逻辑概念。Pod，其实是一组共享了某些资源的容器。具体的说，Pod里的所有容</description>
    </item>
    
    <item>
      <title>每天一个python标准库00</title>
      <link>https://kenwoodjw.github.io/post/python_standard_lib_01/</link>
      <pubDate>Mon, 08 Apr 2019 22:41:26 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/python_standard_lib_01/</guid>
      <description>itertools &amp;mdash; 为高效循环而创建迭代器的函数 In [2]: dir(itertools) Out[2]: [&amp;#39;__doc__&amp;#39;, &amp;#39;__loader__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__package__&amp;#39;, &amp;#39;__spec__&amp;#39;, &amp;#39;_grouper&amp;#39;, &amp;#39;_tee&amp;#39;, &amp;#39;_tee_dataobject&amp;#39;, &amp;#39;accumulate&amp;#39;, &amp;#39;chain&amp;#39;, &amp;#39;combinations&amp;#39;, &amp;#39;combinations_with_replacement&amp;#39;, &amp;#39;compress&amp;#39;, &amp;#39;count&amp;#39;, &amp;#39;cycle&amp;#39;, &amp;#39;dropwhile&amp;#39;, &amp;#39;filterfalse&amp;#39;, &amp;#39;groupby&amp;#39;, &amp;#39;islice&amp;#39;, &amp;#39;permutations&amp;#39;, &amp;#39;product&amp;#39;, &amp;#39;repeat&amp;#39;, &amp;#39;starmap&amp;#39;, &amp;#39;takewhile&amp;#39;, &amp;#39;tee&amp;#39;, &amp;#39;zip_longest&amp;#39;] 无穷迭代器 from itertools import count [i for i in count(10)] -- &amp;gt; [10,11,12,13,14....] </description>
    </item>
    
    <item>
      <title>hugo部署网站，circleci自动构建静态页面</title>
      <link>https://kenwoodjw.github.io/post/hugo/</link>
      <pubDate>Sun, 24 Mar 2019 20:52:13 +0800</pubDate>
      
      <guid>https://kenwoodjw.github.io/post/hugo/</guid>
      <description>1. 安裝 Hugo brew install hugo 2. 建立新网站 hugo new site my-website cd my-website git init my-website 可以替换成任意名称，但你也可以跟我一样，避免麻煩。找到名为 my-website 的文件夾，观察文件夹结构。 3. 新增主題</description>
    </item>
    
  </channel>
</rss>
